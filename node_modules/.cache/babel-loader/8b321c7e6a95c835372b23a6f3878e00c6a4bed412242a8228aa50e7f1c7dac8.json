{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Development/code/phase2/code-challenge1-phase2/my-react-app/src/transactionList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransactionList() {\n  _s();\n  const [column, setColumn] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/transactions\").then(response => response.json()).then(data => {\n      setColumn(Object.keys(data.transactions[0]));\n      setTransactions(data.transactions);\n    });\n  }, []);\n\n  // use an empty dependencies array, so we only run the fetch request ONCE\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: transactions.map(transaction => transaction.name)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 14\n  }, this);\n}\n_s(TransactionList, \"Q/9DFrAURdmDhNHcZG7S+5BBU+s=\");\n_c = TransactionList;\nexport default TransactionList;\nvar _c;\n$RefreshReg$(_c, \"TransactionList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TransactionList","_s","column","setColumn","transactions","setTransactions","fetch","then","response","json","data","Object","keys","children","map","transaction","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alvin/Development/code/phase2/code-challenge1-phase2/my-react-app/src/transactionList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction TransactionList () {\n    const [column,setColumn]= useState([]);\n  const [transactions,setTransactions] = useState([]);\n    useEffect(() => {\n        fetch(\"http://localhost:3000/transactions\")\n          .then(response => response.json())\n          .then(data=>  {\n              setColumn(Object.keys(data.transactions[0]))\n              setTransactions(data.transactions)\n          })\n          },[]);\n\n      // use an empty dependencies array, so we only run the fetch request ONCE\n    \n      return <div>{transactions.map((transaction) => transaction.name)}</div>;\n    }\n  \n\nexport default TransactionList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAAA,EAAI;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAEP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,YAAY,EAACC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACjDC,SAAS,CAAC,MAAM;IACZS,KAAK,CAAC,oCAAoC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVP,SAAS,CAACQ,MAAM,CAACC,IAAI,CAACF,IAAI,CAACN,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5CC,eAAe,CAACK,IAAI,CAACN,YAAY,CAAC;IACtC,CAAC,CAAC;EACF,CAAC,EAAC,EAAE,CAAC;;EAET;;EAEA,oBAAOL,OAAA;IAAAc,QAAA,EAAMT,YAAY,CAACU,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACC,IAAI;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AACzE;AAACnB,EAAA,CAfID,eAAe;AAAAqB,EAAA,GAAfrB,eAAe;AAkBxB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}